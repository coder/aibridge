// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coder/aibridge/mcp (interfaces: ServerProxier)
//
// Generated by this command:
//
//	mockgen -destination ./mcpmock.go -package mcpmock github.com/coder/aibridge/mcp ServerProxier
//

// Package mcpmock is a generated GoMock package.
package mcpmock

import (
	context "context"
	reflect "reflect"

	mcp "github.com/coder/aibridge/mcp"
	mcp0 "github.com/mark3labs/mcp-go/mcp"
	gomock "go.uber.org/mock/gomock"
)

// MockServerProxier is a mock of ServerProxier interface.
type MockServerProxier struct {
	ctrl     *gomock.Controller
	recorder *MockServerProxierMockRecorder
	isgomock struct{}
}

// MockServerProxierMockRecorder is the mock recorder for MockServerProxier.
type MockServerProxierMockRecorder struct {
	mock *MockServerProxier
}

// NewMockServerProxier creates a new mock instance.
func NewMockServerProxier(ctrl *gomock.Controller) *MockServerProxier {
	mock := &MockServerProxier{ctrl: ctrl}
	mock.recorder = &MockServerProxierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerProxier) EXPECT() *MockServerProxierMockRecorder {
	return m.recorder
}

// CallTool mocks base method.
func (m *MockServerProxier) CallTool(ctx context.Context, name string, input any) (*mcp0.CallToolResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTool", ctx, name, input)
	ret0, _ := ret[0].(*mcp0.CallToolResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallTool indicates an expected call of CallTool.
func (mr *MockServerProxierMockRecorder) CallTool(ctx, name, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTool", reflect.TypeOf((*MockServerProxier)(nil).CallTool), ctx, name, input)
}

// GetTool mocks base method.
func (m *MockServerProxier) GetTool(id string) *mcp.Tool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTool", id)
	ret0, _ := ret[0].(*mcp.Tool)
	return ret0
}

// GetTool indicates an expected call of GetTool.
func (mr *MockServerProxierMockRecorder) GetTool(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTool", reflect.TypeOf((*MockServerProxier)(nil).GetTool), id)
}

// Init mocks base method.
func (m *MockServerProxier) Init(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServerProxierMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServerProxier)(nil).Init), arg0)
}

// ListTools mocks base method.
func (m *MockServerProxier) ListTools() []*mcp.Tool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTools")
	ret0, _ := ret[0].([]*mcp.Tool)
	return ret0
}

// ListTools indicates an expected call of ListTools.
func (mr *MockServerProxierMockRecorder) ListTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTools", reflect.TypeOf((*MockServerProxier)(nil).ListTools))
}

// Shutdown mocks base method.
func (m *MockServerProxier) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerProxierMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServerProxier)(nil).Shutdown), ctx)
}
